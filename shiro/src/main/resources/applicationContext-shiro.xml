<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-3.2.xsd ">

    <!--web.xml中shiro的filter对应的bean-->
    <!-- Shiro 的Web过滤器 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <!-- loginUrl认证提交地址，如果没有认证将会请求此地址进行认证，请求此地址将由formAuthenticationFilter进行表单认证 -->
        <property name="loginUrl" value="/login"/>
        <!--认证成功统一跳转到first.actio，建议不配置，不配置的话shiro认证成功会自动到上一个请求路径-->
        <!-- <property name="successUrl" value="/index.jsp"/> -->
        <!-- <property name="unauthorizedUrl" value="/refuse.jsp" /> -->
        <!-- 过虑器链定义，从上向下顺序执行，一般将/**放在最下边 -->
        <!--<property name="filters">-->
            <!--<map>-->
                <!--<entry key="visiterFilter">-->
                    <!--<bean class="com.kdkj.py.files.VisitFilter"/>-->
                <!--</entry>-->
                <!--<entry key="statelessAuthcFilter">-->
                    <!--<bean class="com.kdkj.py.files.StatelessAuthcFilter"/>-->
                <!--</entry>-->
            <!--</map>-->
        <!--</property>-->
        <!-- 过虑器链定义，从上向下顺序执行，一般将/**放在最下边 -->
        <property name="filterChainDefinitions">
            <value>
                <!--对静态资源设置匿名访问-->
                /images/**=anon
                /js/**=anon
                /style/**=anon
                /login=anon
                /users/register=anon
                <!--/swagger-ui.html/*=anon-->
                <!--/*=statelessAuthcFilter-->
                <!--/**=anon 表示所有的url都可以匿名访问，anon是shiro中一个过滤器的简写，关于shiro中的过滤器介绍见-->
                <!-- /**=anon -->
            </value>
        </property>
    </bean>
    <!--securityManage-->
    <!-- 安全管理器 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!--<property name="realm" ref="tokenRealm" />-->
        <property name="authenticator" ref="authenticator"></property>
    </bean>
    <!--自定义realm -->
    <!--<bean id="tokenRealm" class="com.kdkj.caijin.realm.TokenRealm"></bean>-->
    <bean id="pwdRealm" class="com.kdkj.py.shiro.realm.PwdRealm"></bean>
    <!--<bean id="statelessAuthcFilter" class="com.kdkj.caijin.files.StatelessAuthcFilter"></bean>-->
    <!-- 配置使用自定义认证器，可以实现多Realm认证，并且可以指定特定Realm处理特定类型的验证 -->
    <bean id="authenticator" class="org.apache.shiro.authc.pam.ModularRealmAuthenticator">
        <property name="authenticationStrategy">
            <bean class="org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy"></bean>
        </property>
        <property name="realms">
            <list>
                <!--<ref bean="tokenRealm"/>-->
                <ref bean="pwdRealm"/>
            </list>
        </property>
    </bean>
    <!-- 生命周期bean后置处理器 -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"></bean>
    <!-- 开启aop，对类代理 -->
    <aop:config proxy-target-class="true"></aop:config>
    <!-- 开启shiro注解支持 -->
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>
</beans>